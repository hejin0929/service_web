// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: district/v1/district.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDistrictGetDistrict = "/api.district.v1.District/GetDistrict"
const OperationDistrictUpdateDistrict = "/api.district.v1.District/UpdateDistrict"

type DistrictHTTPServer interface {
	GetDistrict(context.Context, *GetDistrictRequest) (*GetDistrictReply, error)
	UpdateDistrict(context.Context, *UpdateDistrictRequest) (*UpdateDistrictReply, error)
}

func RegisterDistrictHTTPServer(s *http.Server, srv DistrictHTTPServer) {
	r := s.Route("/")
	r.PATCH("/api/v1/roles/district", _District_UpdateDistrict0_HTTP_Handler(srv))
	r.GET("/api/v1/roles/district", _District_GetDistrict0_HTTP_Handler(srv))
}

func _District_UpdateDistrict0_HTTP_Handler(srv DistrictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDistrictRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDistrictUpdateDistrict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDistrict(ctx, req.(*UpdateDistrictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDistrictReply)
		return ctx.Result(200, reply)
	}
}

func _District_GetDistrict0_HTTP_Handler(srv DistrictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDistrictRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDistrictGetDistrict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDistrict(ctx, req.(*GetDistrictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDistrictReply)
		return ctx.Result(200, reply)
	}
}

type DistrictHTTPClient interface {
	GetDistrict(ctx context.Context, req *GetDistrictRequest, opts ...http.CallOption) (rsp *GetDistrictReply, err error)
	UpdateDistrict(ctx context.Context, req *UpdateDistrictRequest, opts ...http.CallOption) (rsp *UpdateDistrictReply, err error)
}

type DistrictHTTPClientImpl struct {
	cc *http.Client
}

func NewDistrictHTTPClient(client *http.Client) DistrictHTTPClient {
	return &DistrictHTTPClientImpl{client}
}

func (c *DistrictHTTPClientImpl) GetDistrict(ctx context.Context, in *GetDistrictRequest, opts ...http.CallOption) (*GetDistrictReply, error) {
	var out GetDistrictReply
	pattern := "/api/v1/roles/district"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDistrictGetDistrict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DistrictHTTPClientImpl) UpdateDistrict(ctx context.Context, in *UpdateDistrictRequest, opts ...http.CallOption) (*UpdateDistrictReply, error) {
	var out UpdateDistrictReply
	pattern := "/api/v1/roles/district"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDistrictUpdateDistrict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
