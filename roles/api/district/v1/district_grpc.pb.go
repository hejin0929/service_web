// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: district/v1/district.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	District_CreateDistrict_FullMethodName = "/api.district.v1.District/CreateDistrict"
	District_UpdateDistrict_FullMethodName = "/api.district.v1.District/UpdateDistrict"
	District_DeleteDistrict_FullMethodName = "/api.district.v1.District/DeleteDistrict"
	District_GetDistrict_FullMethodName    = "/api.district.v1.District/GetDistrict"
)

// DistrictClient is the client API for District service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistrictClient interface {
	CreateDistrict(ctx context.Context, in *CreateDistrictRequest, opts ...grpc.CallOption) (*CreateDistrictReply, error)
	UpdateDistrict(ctx context.Context, in *UpdateDistrictRequest, opts ...grpc.CallOption) (*UpdateDistrictReply, error)
	DeleteDistrict(ctx context.Context, in *DeleteDistrictRequest, opts ...grpc.CallOption) (*DeleteDistrictReply, error)
	GetDistrict(ctx context.Context, in *GetDistrictRequest, opts ...grpc.CallOption) (*GetDistrictReply, error)
}

type districtClient struct {
	cc grpc.ClientConnInterface
}

func NewDistrictClient(cc grpc.ClientConnInterface) DistrictClient {
	return &districtClient{cc}
}

func (c *districtClient) CreateDistrict(ctx context.Context, in *CreateDistrictRequest, opts ...grpc.CallOption) (*CreateDistrictReply, error) {
	out := new(CreateDistrictReply)
	err := c.cc.Invoke(ctx, District_CreateDistrict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtClient) UpdateDistrict(ctx context.Context, in *UpdateDistrictRequest, opts ...grpc.CallOption) (*UpdateDistrictReply, error) {
	out := new(UpdateDistrictReply)
	err := c.cc.Invoke(ctx, District_UpdateDistrict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtClient) DeleteDistrict(ctx context.Context, in *DeleteDistrictRequest, opts ...grpc.CallOption) (*DeleteDistrictReply, error) {
	out := new(DeleteDistrictReply)
	err := c.cc.Invoke(ctx, District_DeleteDistrict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtClient) GetDistrict(ctx context.Context, in *GetDistrictRequest, opts ...grpc.CallOption) (*GetDistrictReply, error) {
	out := new(GetDistrictReply)
	err := c.cc.Invoke(ctx, District_GetDistrict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistrictServer is the server API for District service.
// All implementations must embed UnimplementedDistrictServer
// for forward compatibility
type DistrictServer interface {
	CreateDistrict(context.Context, *CreateDistrictRequest) (*CreateDistrictReply, error)
	UpdateDistrict(context.Context, *UpdateDistrictRequest) (*UpdateDistrictReply, error)
	DeleteDistrict(context.Context, *DeleteDistrictRequest) (*DeleteDistrictReply, error)
	GetDistrict(context.Context, *GetDistrictRequest) (*GetDistrictReply, error)
	mustEmbedUnimplementedDistrictServer()
}

// UnimplementedDistrictServer must be embedded to have forward compatible implementations.
type UnimplementedDistrictServer struct {
}

func (UnimplementedDistrictServer) CreateDistrict(context.Context, *CreateDistrictRequest) (*CreateDistrictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDistrict not implemented")
}
func (UnimplementedDistrictServer) UpdateDistrict(context.Context, *UpdateDistrictRequest) (*UpdateDistrictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDistrict not implemented")
}
func (UnimplementedDistrictServer) DeleteDistrict(context.Context, *DeleteDistrictRequest) (*DeleteDistrictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDistrict not implemented")
}
func (UnimplementedDistrictServer) GetDistrict(context.Context, *GetDistrictRequest) (*GetDistrictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistrict not implemented")
}
func (UnimplementedDistrictServer) mustEmbedUnimplementedDistrictServer() {}

// UnsafeDistrictServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistrictServer will
// result in compilation errors.
type UnsafeDistrictServer interface {
	mustEmbedUnimplementedDistrictServer()
}

func RegisterDistrictServer(s grpc.ServiceRegistrar, srv DistrictServer) {
	s.RegisterService(&District_ServiceDesc, srv)
}

func _District_CreateDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServer).CreateDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: District_CreateDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServer).CreateDistrict(ctx, req.(*CreateDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _District_UpdateDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServer).UpdateDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: District_UpdateDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServer).UpdateDistrict(ctx, req.(*UpdateDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _District_DeleteDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServer).DeleteDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: District_DeleteDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServer).DeleteDistrict(ctx, req.(*DeleteDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _District_GetDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServer).GetDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: District_GetDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServer).GetDistrict(ctx, req.(*GetDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// District_ServiceDesc is the grpc.ServiceDesc for District service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var District_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.district.v1.District",
	HandlerType: (*DistrictServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDistrict",
			Handler:    _District_CreateDistrict_Handler,
		},
		{
			MethodName: "UpdateDistrict",
			Handler:    _District_UpdateDistrict_Handler,
		},
		{
			MethodName: "DeleteDistrict",
			Handler:    _District_DeleteDistrict_Handler,
		},
		{
			MethodName: "GetDistrict",
			Handler:    _District_GetDistrict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "district/v1/district.proto",
}
