// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: roles/v1/roles.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRolesCreateRoles = "/api.roles.v1.Roles/CreateRoles"
const OperationRolesGetRoles = "/api.roles.v1.Roles/GetRoles"
const OperationRolesUpdateRoles = "/api.roles.v1.Roles/UpdateRoles"

type RolesHTTPServer interface {
	CreateRoles(context.Context, *CreateRolesRequest) (*CreateRolesReply, error)
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesReply, error)
	UpdateRoles(context.Context, *UpdateRolesRequest) (*UpdateRolesReply, error)
}

func RegisterRolesHTTPServer(s *http.Server, srv RolesHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/base/roles", _Roles_CreateRoles0_HTTP_Handler(srv))
	r.PATCH("/api/v1/base/roles", _Roles_UpdateRoles0_HTTP_Handler(srv))
	r.GET("/api/v1/base/roles", _Roles_GetRoles0_HTTP_Handler(srv))
}

func _Roles_CreateRoles0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRolesCreateRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRoles(ctx, req.(*CreateRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRolesReply)
		return ctx.Result(200, reply)
	}
}

func _Roles_UpdateRoles0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRolesUpdateRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRoles(ctx, req.(*UpdateRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRolesReply)
		return ctx.Result(200, reply)
	}
}

func _Roles_GetRoles0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRolesGetRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoles(ctx, req.(*GetRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolesReply)
		return ctx.Result(200, reply)
	}
}

type RolesHTTPClient interface {
	CreateRoles(ctx context.Context, req *CreateRolesRequest, opts ...http.CallOption) (rsp *CreateRolesReply, err error)
	GetRoles(ctx context.Context, req *GetRolesRequest, opts ...http.CallOption) (rsp *GetRolesReply, err error)
	UpdateRoles(ctx context.Context, req *UpdateRolesRequest, opts ...http.CallOption) (rsp *UpdateRolesReply, err error)
}

type RolesHTTPClientImpl struct {
	cc *http.Client
}

func NewRolesHTTPClient(client *http.Client) RolesHTTPClient {
	return &RolesHTTPClientImpl{client}
}

func (c *RolesHTTPClientImpl) CreateRoles(ctx context.Context, in *CreateRolesRequest, opts ...http.CallOption) (*CreateRolesReply, error) {
	var out CreateRolesReply
	pattern := "/api/v1/base/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRolesCreateRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RolesHTTPClientImpl) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...http.CallOption) (*GetRolesReply, error) {
	var out GetRolesReply
	pattern := "/api/v1/base/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRolesGetRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RolesHTTPClientImpl) UpdateRoles(ctx context.Context, in *UpdateRolesRequest, opts ...http.CallOption) (*UpdateRolesReply, error) {
	var out UpdateRolesReply
	pattern := "/api/v1/base/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRolesUpdateRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
