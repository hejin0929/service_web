// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/district/v1/district.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateDistrictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDistrictRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateDistrictRequestValidationError is the validation error returned by
// CreateDistrictRequest.Validate if the designated constraints aren't met.
type CreateDistrictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDistrictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDistrictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDistrictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDistrictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDistrictRequestValidationError) ErrorName() string {
	return "CreateDistrictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDistrictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDistrictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDistrictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDistrictRequestValidationError{}

// Validate checks the field values on CreateDistrictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDistrictReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateDistrictReplyValidationError is the validation error returned by
// CreateDistrictReply.Validate if the designated constraints aren't met.
type CreateDistrictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDistrictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDistrictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDistrictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDistrictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDistrictReplyValidationError) ErrorName() string {
	return "CreateDistrictReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDistrictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDistrictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDistrictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDistrictReplyValidationError{}

// Validate checks the field values on UpdateDistrictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDistrictRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return UpdateDistrictRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// UpdateDistrictRequestValidationError is the validation error returned by
// UpdateDistrictRequest.Validate if the designated constraints aren't met.
type UpdateDistrictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDistrictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDistrictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDistrictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDistrictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDistrictRequestValidationError) ErrorName() string {
	return "UpdateDistrictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDistrictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDistrictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDistrictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDistrictRequestValidationError{}

// Validate checks the field values on UpdateDistrictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDistrictReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	return nil
}

// UpdateDistrictReplyValidationError is the validation error returned by
// UpdateDistrictReply.Validate if the designated constraints aren't met.
type UpdateDistrictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDistrictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDistrictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDistrictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDistrictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDistrictReplyValidationError) ErrorName() string {
	return "UpdateDistrictReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDistrictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDistrictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDistrictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDistrictReplyValidationError{}

// Validate checks the field values on DeleteDistrictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDistrictRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteDistrictRequestValidationError is the validation error returned by
// DeleteDistrictRequest.Validate if the designated constraints aren't met.
type DeleteDistrictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDistrictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDistrictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDistrictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDistrictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDistrictRequestValidationError) ErrorName() string {
	return "DeleteDistrictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDistrictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDistrictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDistrictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDistrictRequestValidationError{}

// Validate checks the field values on DeleteDistrictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDistrictReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteDistrictReplyValidationError is the validation error returned by
// DeleteDistrictReply.Validate if the designated constraints aren't met.
type DeleteDistrictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDistrictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDistrictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDistrictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDistrictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDistrictReplyValidationError) ErrorName() string {
	return "DeleteDistrictReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDistrictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDistrictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDistrictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDistrictReplyValidationError{}

// Validate checks the field values on GetDistrictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDistrictRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDistrictRequestValidationError is the validation error returned by
// GetDistrictRequest.Validate if the designated constraints aren't met.
type GetDistrictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDistrictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDistrictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDistrictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDistrictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDistrictRequestValidationError) ErrorName() string {
	return "GetDistrictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDistrictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDistrictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDistrictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDistrictRequestValidationError{}

// Validate checks the field values on GetDistrictReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetDistrictReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	for idx, item := range m.GetLists() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDistrictReplyValidationError{
					field:  fmt.Sprintf("Lists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetDistrictReplyValidationError is the validation error returned by
// GetDistrictReply.Validate if the designated constraints aren't met.
type GetDistrictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDistrictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDistrictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDistrictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDistrictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDistrictReplyValidationError) ErrorName() string { return "GetDistrictReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDistrictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDistrictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDistrictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDistrictReplyValidationError{}

// Validate checks the field values on DistrictData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DistrictData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for OpenTime

	// no validation rules for CloseTime

	// no validation rules for Id

	// no validation rules for Type

	return nil
}

// DistrictDataValidationError is the validation error returned by
// DistrictData.Validate if the designated constraints aren't met.
type DistrictDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistrictDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistrictDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistrictDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistrictDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistrictDataValidationError) ErrorName() string { return "DistrictDataValidationError" }

// Error satisfies the builtin error interface
func (e DistrictDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistrictData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistrictDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistrictDataValidationError{}
