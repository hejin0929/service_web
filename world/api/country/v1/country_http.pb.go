// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: country/v1/country.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCountryCreateCountry = "/api.country.v1.Country/CreateCountry"
const OperationCountryGetCountry = "/api.country.v1.Country/GetCountry"
const OperationCountryListCountry = "/api.country.v1.Country/ListCountry"
const OperationCountryUpdateCountry = "/api.country.v1.Country/UpdateCountry"

type CountryHTTPServer interface {
	CreateCountry(context.Context, *CreateCountryRequest) (*CreateCountryReply, error)
	GetCountry(context.Context, *GetCountryRequest) (*GetCountryReply, error)
	ListCountry(context.Context, *ListCountryRequest) (*ListCountryReply, error)
	UpdateCountry(context.Context, *UpdateCountryRequest) (*UpdateCountryReply, error)
}

func RegisterCountryHTTPServer(s *http.Server, srv CountryHTTPServer) {
	r := s.Route("/")
	r.POST("api/v1/world/country", _Country_CreateCountry0_HTTP_Handler(srv))
	r.PATCH("api/v1/world/country", _Country_UpdateCountry0_HTTP_Handler(srv))
	r.GET("api/v1/world/country", _Country_GetCountry0_HTTP_Handler(srv))
	r.GET("api/v1/world/country/lists", _Country_ListCountry0_HTTP_Handler(srv))
}

func _Country_CreateCountry0_HTTP_Handler(srv CountryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCountryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCountryCreateCountry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCountry(ctx, req.(*CreateCountryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCountryReply)
		return ctx.Result(200, reply)
	}
}

func _Country_UpdateCountry0_HTTP_Handler(srv CountryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCountryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCountryUpdateCountry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCountry(ctx, req.(*UpdateCountryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCountryReply)
		return ctx.Result(200, reply)
	}
}

func _Country_GetCountry0_HTTP_Handler(srv CountryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCountryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCountryGetCountry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCountry(ctx, req.(*GetCountryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCountryReply)
		return ctx.Result(200, reply)
	}
}

func _Country_ListCountry0_HTTP_Handler(srv CountryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCountryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCountryListCountry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCountry(ctx, req.(*ListCountryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCountryReply)
		return ctx.Result(200, reply)
	}
}

type CountryHTTPClient interface {
	CreateCountry(ctx context.Context, req *CreateCountryRequest, opts ...http.CallOption) (rsp *CreateCountryReply, err error)
	GetCountry(ctx context.Context, req *GetCountryRequest, opts ...http.CallOption) (rsp *GetCountryReply, err error)
	ListCountry(ctx context.Context, req *ListCountryRequest, opts ...http.CallOption) (rsp *ListCountryReply, err error)
	UpdateCountry(ctx context.Context, req *UpdateCountryRequest, opts ...http.CallOption) (rsp *UpdateCountryReply, err error)
}

type CountryHTTPClientImpl struct {
	cc *http.Client
}

func NewCountryHTTPClient(client *http.Client) CountryHTTPClient {
	return &CountryHTTPClientImpl{client}
}

func (c *CountryHTTPClientImpl) CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...http.CallOption) (*CreateCountryReply, error) {
	var out CreateCountryReply
	pattern := "api/v1/world/country"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCountryCreateCountry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CountryHTTPClientImpl) GetCountry(ctx context.Context, in *GetCountryRequest, opts ...http.CallOption) (*GetCountryReply, error) {
	var out GetCountryReply
	pattern := "api/v1/world/country"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCountryGetCountry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CountryHTTPClientImpl) ListCountry(ctx context.Context, in *ListCountryRequest, opts ...http.CallOption) (*ListCountryReply, error) {
	var out ListCountryReply
	pattern := "api/v1/world/country/lists"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCountryListCountry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CountryHTTPClientImpl) UpdateCountry(ctx context.Context, in *UpdateCountryRequest, opts ...http.CallOption) (*UpdateCountryReply, error) {
	var out UpdateCountryReply
	pattern := "api/v1/world/country"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCountryUpdateCountry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
