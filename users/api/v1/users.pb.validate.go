// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/users.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUsersRequestMultiError, or nil if none found.
func (m *CreateUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 1 || l > 20 {
		err := CreateUsersRequestValidationError{
			field:  "Account",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Phone

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetPassword()) != 32 {
		err := CreateUsersRequestValidationError{
			field:  "Password",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for Age

	// no validation rules for Sex

	// no validation rules for Email

	// no validation rules for School

	// no validation rules for Address

	// no validation rules for CardId

	// no validation rules for CardName

	if len(errors) > 0 {
		return CreateUsersRequestMultiError(errors)
	}

	return nil
}

// CreateUsersRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUsersRequestMultiError) AllErrors() []error { return m }

// CreateUsersRequestValidationError is the validation error returned by
// CreateUsersRequest.Validate if the designated constraints aren't met.
type CreateUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUsersRequestValidationError) ErrorName() string {
	return "CreateUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUsersRequestValidationError{}

// Validate checks the field values on CreateUsersReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUsersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUsersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUsersReplyMultiError, or nil if none found.
func (m *CreateUsersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUsersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateUsersReplyMultiError(errors)
	}

	return nil
}

// CreateUsersReplyMultiError is an error wrapping multiple validation errors
// returned by CreateUsersReply.ValidateAll() if the designated constraints
// aren't met.
type CreateUsersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUsersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUsersReplyMultiError) AllErrors() []error { return m }

// CreateUsersReplyValidationError is the validation error returned by
// CreateUsersReply.Validate if the designated constraints aren't met.
type CreateUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUsersReplyValidationError) ErrorName() string { return "CreateUsersReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUsersReplyValidationError{}

// Validate checks the field values on UpdateUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUsersRequestMultiError, or nil if none found.
func (m *UpdateUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUsersRequestMultiError(errors)
	}

	return nil
}

// UpdateUsersRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUsersRequestMultiError) AllErrors() []error { return m }

// UpdateUsersRequestValidationError is the validation error returned by
// UpdateUsersRequest.Validate if the designated constraints aren't met.
type UpdateUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUsersRequestValidationError) ErrorName() string {
	return "UpdateUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUsersRequestValidationError{}

// Validate checks the field values on UpdateUsersReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUsersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUsersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUsersReplyMultiError, or nil if none found.
func (m *UpdateUsersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUsersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUsersReplyMultiError(errors)
	}

	return nil
}

// UpdateUsersReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateUsersReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateUsersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUsersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUsersReplyMultiError) AllErrors() []error { return m }

// UpdateUsersReplyValidationError is the validation error returned by
// UpdateUsersReply.Validate if the designated constraints aren't met.
type UpdateUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUsersReplyValidationError) ErrorName() string { return "UpdateUsersReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUsersReplyValidationError{}

// Validate checks the field values on DeleteUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUsersRequestMultiError, or nil if none found.
func (m *DeleteUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return DeleteUsersRequestMultiError(errors)
	}

	return nil
}

// DeleteUsersRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUsersRequestMultiError) AllErrors() []error { return m }

// DeleteUsersRequestValidationError is the validation error returned by
// DeleteUsersRequest.Validate if the designated constraints aren't met.
type DeleteUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUsersRequestValidationError) ErrorName() string {
	return "DeleteUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUsersRequestValidationError{}

// Validate checks the field values on DeleteUsersReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUsersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUsersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUsersReplyMultiError, or nil if none found.
func (m *DeleteUsersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUsersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Msg

	if len(errors) > 0 {
		return DeleteUsersReplyMultiError(errors)
	}

	return nil
}

// DeleteUsersReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteUsersReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteUsersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUsersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUsersReplyMultiError) AllErrors() []error { return m }

// DeleteUsersReplyValidationError is the validation error returned by
// DeleteUsersReply.Validate if the designated constraints aren't met.
type DeleteUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUsersReplyValidationError) ErrorName() string { return "DeleteUsersReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUsersReplyValidationError{}

// Validate checks the field values on GetUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersRequestMultiError, or nil if none found.
func (m *GetUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := GetUsersRequestValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUsersRequestMultiError(errors)
	}

	return nil
}

// GetUsersRequestMultiError is an error wrapping multiple validation errors
// returned by GetUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersRequestMultiError) AllErrors() []error { return m }

// GetUsersRequestValidationError is the validation error returned by
// GetUsersRequest.Validate if the designated constraints aren't met.
type GetUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersRequestValidationError) ErrorName() string { return "GetUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersRequestValidationError{}

// Validate checks the field values on GetUsersReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUsersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUsersReplyMultiError, or
// nil if none found.
func (m *GetUsersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return GetUsersReplyMultiError(errors)
	}

	return nil
}

// GetUsersReplyMultiError is an error wrapping multiple validation errors
// returned by GetUsersReply.ValidateAll() if the designated constraints
// aren't met.
type GetUsersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersReplyMultiError) AllErrors() []error { return m }

// GetUsersReplyValidationError is the validation error returned by
// GetUsersReply.Validate if the designated constraints aren't met.
type GetUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersReplyValidationError) ErrorName() string { return "GetUsersReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersReplyValidationError{}

// Validate checks the field values on PatchUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PatchUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchUsersRequestMultiError, or nil if none found.
func (m *PatchUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Age

	// no validation rules for Address

	// no validation rules for Email

	// no validation rules for Avatar

	// no validation rules for School

	// no validation rules for Phone

	// no validation rules for Sex

	// no validation rules for Uuid

	if len(errors) > 0 {
		return PatchUsersRequestMultiError(errors)
	}

	return nil
}

// PatchUsersRequestMultiError is an error wrapping multiple validation errors
// returned by PatchUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type PatchUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchUsersRequestMultiError) AllErrors() []error { return m }

// PatchUsersRequestValidationError is the validation error returned by
// PatchUsersRequest.Validate if the designated constraints aren't met.
type PatchUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchUsersRequestValidationError) ErrorName() string {
	return "PatchUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchUsersRequestValidationError{}

// Validate checks the field values on PatchUsersReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PatchUsersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchUsersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchUsersReplyMultiError, or nil if none found.
func (m *PatchUsersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchUsersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return PatchUsersReplyMultiError(errors)
	}

	return nil
}

// PatchUsersReplyMultiError is an error wrapping multiple validation errors
// returned by PatchUsersReply.ValidateAll() if the designated constraints
// aren't met.
type PatchUsersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchUsersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchUsersReplyMultiError) AllErrors() []error { return m }

// PatchUsersReplyValidationError is the validation error returned by
// PatchUsersReply.Validate if the designated constraints aren't met.
type PatchUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchUsersReplyValidationError) ErrorName() string { return "PatchUsersReplyValidationError" }

// Error satisfies the builtin error interface
func (e PatchUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchUsersReplyValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUsersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUsersReplyMultiError,
// or nil if none found.
func (m *ListUsersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUsersReplyMultiError(errors)
	}

	return nil
}

// ListUsersReplyMultiError is an error wrapping multiple validation errors
// returned by ListUsersReply.ValidateAll() if the designated constraints
// aren't met.
type ListUsersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersReplyMultiError) AllErrors() []error { return m }

// ListUsersReplyValidationError is the validation error returned by
// ListUsersReply.Validate if the designated constraints aren't met.
type ListUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersReplyValidationError) ErrorName() string { return "ListUsersReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersReplyValidationError{}

// Validate checks the field values on LoginUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginUsersRequestMultiError, or nil if none found.
func (m *LoginUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginUsersRequestMultiError(errors)
	}

	return nil
}

// LoginUsersRequestMultiError is an error wrapping multiple validation errors
// returned by LoginUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type LoginUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginUsersRequestMultiError) AllErrors() []error { return m }

// LoginUsersRequestValidationError is the validation error returned by
// LoginUsersRequest.Validate if the designated constraints aren't met.
type LoginUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginUsersRequestValidationError) ErrorName() string {
	return "LoginUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginUsersRequestValidationError{}

// Validate checks the field values on LoginUsersReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginUsersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginUsersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginUsersReplyMultiError, or nil if none found.
func (m *LoginUsersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginUsersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginUsersReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginUsersReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginUsersReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginUsersReplyMultiError(errors)
	}

	return nil
}

// LoginUsersReplyMultiError is an error wrapping multiple validation errors
// returned by LoginUsersReply.ValidateAll() if the designated constraints
// aren't met.
type LoginUsersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginUsersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginUsersReplyMultiError) AllErrors() []error { return m }

// LoginUsersReplyValidationError is the validation error returned by
// LoginUsersReply.Validate if the designated constraints aren't met.
type LoginUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginUsersReplyValidationError) ErrorName() string { return "LoginUsersReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginUsersReplyValidationError{}

// Validate checks the field values on LoginData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginDataMultiError, or nil
// if none found.
func (m *LoginData) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RefreshToken

	// no validation rules for Uid

	if len(errors) > 0 {
		return LoginDataMultiError(errors)
	}

	return nil
}

// LoginDataMultiError is an error wrapping multiple validation errors returned
// by LoginData.ValidateAll() if the designated constraints aren't met.
type LoginDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginDataMultiError) AllErrors() []error { return m }

// LoginDataValidationError is the validation error returned by
// LoginData.Validate if the designated constraints aren't met.
type LoginDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginDataValidationError) ErrorName() string { return "LoginDataValidationError" }

// Error satisfies the builtin error interface
func (e LoginDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginDataValidationError{}

// Validate checks the field values on ExitUsersLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExitUsersLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExitUsersLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExitUsersLoginRequestMultiError, or nil if none found.
func (m *ExitUsersLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExitUsersLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return ExitUsersLoginRequestMultiError(errors)
	}

	return nil
}

// ExitUsersLoginRequestMultiError is an error wrapping multiple validation
// errors returned by ExitUsersLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type ExitUsersLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExitUsersLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExitUsersLoginRequestMultiError) AllErrors() []error { return m }

// ExitUsersLoginRequestValidationError is the validation error returned by
// ExitUsersLoginRequest.Validate if the designated constraints aren't met.
type ExitUsersLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExitUsersLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExitUsersLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExitUsersLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExitUsersLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExitUsersLoginRequestValidationError) ErrorName() string {
	return "ExitUsersLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExitUsersLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExitUsersLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExitUsersLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExitUsersLoginRequestValidationError{}

// Validate checks the field values on ExitUsersLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExitUsersLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExitUsersLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExitUsersLoginReplyMultiError, or nil if none found.
func (m *ExitUsersLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExitUsersLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return ExitUsersLoginReplyMultiError(errors)
	}

	return nil
}

// ExitUsersLoginReplyMultiError is an error wrapping multiple validation
// errors returned by ExitUsersLoginReply.ValidateAll() if the designated
// constraints aren't met.
type ExitUsersLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExitUsersLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExitUsersLoginReplyMultiError) AllErrors() []error { return m }

// ExitUsersLoginReplyValidationError is the validation error returned by
// ExitUsersLoginReply.Validate if the designated constraints aren't met.
type ExitUsersLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExitUsersLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExitUsersLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExitUsersLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExitUsersLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExitUsersLoginReplyValidationError) ErrorName() string {
	return "ExitUsersLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExitUsersLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExitUsersLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExitUsersLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExitUsersLoginReplyValidationError{}

// Validate checks the field values on PatchUsersLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchUsersLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchUsersLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchUsersLoginRequestMultiError, or nil if none found.
func (m *PatchUsersLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchUsersLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return PatchUsersLoginRequestMultiError(errors)
	}

	return nil
}

// PatchUsersLoginRequestMultiError is an error wrapping multiple validation
// errors returned by PatchUsersLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type PatchUsersLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchUsersLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchUsersLoginRequestMultiError) AllErrors() []error { return m }

// PatchUsersLoginRequestValidationError is the validation error returned by
// PatchUsersLoginRequest.Validate if the designated constraints aren't met.
type PatchUsersLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchUsersLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchUsersLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchUsersLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchUsersLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchUsersLoginRequestValidationError) ErrorName() string {
	return "PatchUsersLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchUsersLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchUsersLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchUsersLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchUsersLoginRequestValidationError{}

// Validate checks the field values on PatchUsersLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchUsersLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchUsersLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchUsersLoginReplyMultiError, or nil if none found.
func (m *PatchUsersLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchUsersLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return PatchUsersLoginReplyMultiError(errors)
	}

	return nil
}

// PatchUsersLoginReplyMultiError is an error wrapping multiple validation
// errors returned by PatchUsersLoginReply.ValidateAll() if the designated
// constraints aren't met.
type PatchUsersLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchUsersLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchUsersLoginReplyMultiError) AllErrors() []error { return m }

// PatchUsersLoginReplyValidationError is the validation error returned by
// PatchUsersLoginReply.Validate if the designated constraints aren't met.
type PatchUsersLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchUsersLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchUsersLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchUsersLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchUsersLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchUsersLoginReplyValidationError) ErrorName() string {
	return "PatchUsersLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PatchUsersLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchUsersLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchUsersLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchUsersLoginReplyValidationError{}

// Validate checks the field values on PatchPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchPasswordRequestMultiError, or nil if none found.
func (m *PatchPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for OldPassword

	if len(errors) > 0 {
		return PatchPasswordRequestMultiError(errors)
	}

	return nil
}

// PatchPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by PatchPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type PatchPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchPasswordRequestMultiError) AllErrors() []error { return m }

// PatchPasswordRequestValidationError is the validation error returned by
// PatchPasswordRequest.Validate if the designated constraints aren't met.
type PatchPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchPasswordRequestValidationError) ErrorName() string {
	return "PatchPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchPasswordRequestValidationError{}

// Validate checks the field values on PatchPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchPasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchPasswordReplyMultiError, or nil if none found.
func (m *PatchPasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchPasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return PatchPasswordReplyMultiError(errors)
	}

	return nil
}

// PatchPasswordReplyMultiError is an error wrapping multiple validation errors
// returned by PatchPasswordReply.ValidateAll() if the designated constraints
// aren't met.
type PatchPasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchPasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchPasswordReplyMultiError) AllErrors() []error { return m }

// PatchPasswordReplyValidationError is the validation error returned by
// PatchPasswordReply.Validate if the designated constraints aren't met.
type PatchPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchPasswordReplyValidationError) ErrorName() string {
	return "PatchPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PatchPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchPasswordReplyValidationError{}

// Validate checks the field values on GetUsersReplyData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUsersReplyData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersReplyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersReplyDataMultiError, or nil if none found.
func (m *GetUsersReplyData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersReplyData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Age

	// no validation rules for Phone

	// no validation rules for Sex

	// no validation rules for Account

	// no validation rules for Email

	// no validation rules for Address

	// no validation rules for Avatar

	// no validation rules for Status

	// no validation rules for Uuid

	// no validation rules for School

	if len(errors) > 0 {
		return GetUsersReplyDataMultiError(errors)
	}

	return nil
}

// GetUsersReplyDataMultiError is an error wrapping multiple validation errors
// returned by GetUsersReplyData.ValidateAll() if the designated constraints
// aren't met.
type GetUsersReplyDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersReplyDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersReplyDataMultiError) AllErrors() []error { return m }

// GetUsersReplyDataValidationError is the validation error returned by
// GetUsersReplyData.Validate if the designated constraints aren't met.
type GetUsersReplyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersReplyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersReplyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersReplyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersReplyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersReplyDataValidationError) ErrorName() string {
	return "GetUsersReplyDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersReplyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersReplyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersReplyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersReplyDataValidationError{}

// Validate checks the field values on PatchUsersReplyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchUsersReplyData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchUsersReplyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchUsersReplyDataMultiError, or nil if none found.
func (m *PatchUsersReplyData) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchUsersReplyData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Age

	// no validation rules for Phone

	// no validation rules for Sex

	// no validation rules for Account

	// no validation rules for Email

	// no validation rules for Address

	// no validation rules for Avatar

	// no validation rules for Status

	// no validation rules for Uuid

	// no validation rules for School

	if len(errors) > 0 {
		return PatchUsersReplyDataMultiError(errors)
	}

	return nil
}

// PatchUsersReplyDataMultiError is an error wrapping multiple validation
// errors returned by PatchUsersReplyData.ValidateAll() if the designated
// constraints aren't met.
type PatchUsersReplyDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchUsersReplyDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchUsersReplyDataMultiError) AllErrors() []error { return m }

// PatchUsersReplyDataValidationError is the validation error returned by
// PatchUsersReplyData.Validate if the designated constraints aren't met.
type PatchUsersReplyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchUsersReplyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchUsersReplyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchUsersReplyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchUsersReplyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchUsersReplyDataValidationError) ErrorName() string {
	return "PatchUsersReplyDataValidationError"
}

// Error satisfies the builtin error interface
func (e PatchUsersReplyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchUsersReplyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchUsersReplyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchUsersReplyDataValidationError{}

// Validate checks the field values on PatchUsersLoginReplyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchUsersLoginReplyData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchUsersLoginReplyData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchUsersLoginReplyDataMultiError, or nil if none found.
func (m *PatchUsersLoginReplyData) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchUsersLoginReplyData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Token

	if len(errors) > 0 {
		return PatchUsersLoginReplyDataMultiError(errors)
	}

	return nil
}

// PatchUsersLoginReplyDataMultiError is an error wrapping multiple validation
// errors returned by PatchUsersLoginReplyData.ValidateAll() if the designated
// constraints aren't met.
type PatchUsersLoginReplyDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchUsersLoginReplyDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchUsersLoginReplyDataMultiError) AllErrors() []error { return m }

// PatchUsersLoginReplyDataValidationError is the validation error returned by
// PatchUsersLoginReplyData.Validate if the designated constraints aren't met.
type PatchUsersLoginReplyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchUsersLoginReplyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchUsersLoginReplyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchUsersLoginReplyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchUsersLoginReplyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchUsersLoginReplyDataValidationError) ErrorName() string {
	return "PatchUsersLoginReplyDataValidationError"
}

// Error satisfies the builtin error interface
func (e PatchUsersLoginReplyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchUsersLoginReplyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchUsersLoginReplyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchUsersLoginReplyDataValidationError{}
