// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/auth/v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on LoginUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LoginUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAccount()) < 2 {
		return LoginUsersRequestValidationError{
			field:  "Account",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for Password

	return nil
}

// LoginUsersRequestValidationError is the validation error returned by
// LoginUsersRequest.Validate if the designated constraints aren't met.
type LoginUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginUsersRequestValidationError) ErrorName() string {
	return "LoginUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginUsersRequestValidationError{}

// Validate checks the field values on LoginUsersReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LoginUsersReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginUsersReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LoginUsersReplyValidationError is the validation error returned by
// LoginUsersReply.Validate if the designated constraints aren't met.
type LoginUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginUsersReplyValidationError) ErrorName() string { return "LoginUsersReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginUsersReplyValidationError{}

// Validate checks the field values on LoginData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for RefreshToken

	// no validation rules for Uid

	return nil
}

// LoginDataValidationError is the validation error returned by
// LoginData.Validate if the designated constraints aren't met.
type LoginDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginDataValidationError) ErrorName() string { return "LoginDataValidationError" }

// Error satisfies the builtin error interface
func (e LoginDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginDataValidationError{}

// Validate checks the field values on ExitUsersLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExitUsersLoginRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	return nil
}

// ExitUsersLoginRequestValidationError is the validation error returned by
// ExitUsersLoginRequest.Validate if the designated constraints aren't met.
type ExitUsersLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExitUsersLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExitUsersLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExitUsersLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExitUsersLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExitUsersLoginRequestValidationError) ErrorName() string {
	return "ExitUsersLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExitUsersLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExitUsersLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExitUsersLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExitUsersLoginRequestValidationError{}

// Validate checks the field values on ExitUsersLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExitUsersLoginReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	return nil
}

// ExitUsersLoginReplyValidationError is the validation error returned by
// ExitUsersLoginReply.Validate if the designated constraints aren't met.
type ExitUsersLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExitUsersLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExitUsersLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExitUsersLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExitUsersLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExitUsersLoginReplyValidationError) ErrorName() string {
	return "ExitUsersLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExitUsersLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExitUsersLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExitUsersLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExitUsersLoginReplyValidationError{}

// Validate checks the field values on PatchUsersLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PatchUsersLoginRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RefreshToken

	return nil
}

// PatchUsersLoginRequestValidationError is the validation error returned by
// PatchUsersLoginRequest.Validate if the designated constraints aren't met.
type PatchUsersLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchUsersLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchUsersLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchUsersLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchUsersLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchUsersLoginRequestValidationError) ErrorName() string {
	return "PatchUsersLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchUsersLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchUsersLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchUsersLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchUsersLoginRequestValidationError{}

// Validate checks the field values on PatchUsersLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PatchUsersLoginReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	return nil
}

// PatchUsersLoginReplyValidationError is the validation error returned by
// PatchUsersLoginReply.Validate if the designated constraints aren't met.
type PatchUsersLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchUsersLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchUsersLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchUsersLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchUsersLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchUsersLoginReplyValidationError) ErrorName() string {
	return "PatchUsersLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PatchUsersLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchUsersLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchUsersLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchUsersLoginReplyValidationError{}

// Validate checks the field values on PatchPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PatchPasswordReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	return nil
}

// PatchPasswordReplyValidationError is the validation error returned by
// PatchPasswordReply.Validate if the designated constraints aren't met.
type PatchPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchPasswordReplyValidationError) ErrorName() string {
	return "PatchPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PatchPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchPasswordReplyValidationError{}

// Validate checks the field values on AuthLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AuthLoginRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// AuthLoginRequestValidationError is the validation error returned by
// AuthLoginRequest.Validate if the designated constraints aren't met.
type AuthLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLoginRequestValidationError) ErrorName() string { return "AuthLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLoginRequestValidationError{}

// Validate checks the field values on AuthLoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AuthLoginReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	return nil
}

// AuthLoginReplyValidationError is the validation error returned by
// AuthLoginReply.Validate if the designated constraints aren't met.
type AuthLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLoginReplyValidationError) ErrorName() string { return "AuthLoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e AuthLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLoginReplyValidationError{}

// Validate checks the field values on PatchUsersLoginReplyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PatchUsersLoginReplyData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	// no validation rules for Token

	return nil
}

// PatchUsersLoginReplyDataValidationError is the validation error returned by
// PatchUsersLoginReplyData.Validate if the designated constraints aren't met.
type PatchUsersLoginReplyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchUsersLoginReplyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchUsersLoginReplyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchUsersLoginReplyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchUsersLoginReplyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchUsersLoginReplyDataValidationError) ErrorName() string {
	return "PatchUsersLoginReplyDataValidationError"
}

// Error satisfies the builtin error interface
func (e PatchUsersLoginReplyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchUsersLoginReplyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchUsersLoginReplyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchUsersLoginReplyDataValidationError{}
