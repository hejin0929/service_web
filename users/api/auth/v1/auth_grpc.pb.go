// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/auth/v1/auth.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_LoginUsers_FullMethodName      = "/api.auth.v1.Auth/LoginUsers"
	Auth_ExitUsersLogin_FullMethodName  = "/api.auth.v1.Auth/ExitUsersLogin"
	Auth_PatchUsersLogin_FullMethodName = "/api.auth.v1.Auth/PatchUsersLogin"
	Auth_AuthLogin_FullMethodName       = "/api.auth.v1.Auth/AuthLogin"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	LoginUsers(ctx context.Context, in *LoginUsersRequest, opts ...grpc.CallOption) (*LoginUsersReply, error)
	ExitUsersLogin(ctx context.Context, in *ExitUsersLoginRequest, opts ...grpc.CallOption) (*ExitUsersLoginReply, error)
	PatchUsersLogin(ctx context.Context, in *PatchUsersLoginRequest, opts ...grpc.CallOption) (*PatchUsersLoginReply, error)
	AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginReply, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) LoginUsers(ctx context.Context, in *LoginUsersRequest, opts ...grpc.CallOption) (*LoginUsersReply, error) {
	out := new(LoginUsersReply)
	err := c.cc.Invoke(ctx, Auth_LoginUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ExitUsersLogin(ctx context.Context, in *ExitUsersLoginRequest, opts ...grpc.CallOption) (*ExitUsersLoginReply, error) {
	out := new(ExitUsersLoginReply)
	err := c.cc.Invoke(ctx, Auth_ExitUsersLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) PatchUsersLogin(ctx context.Context, in *PatchUsersLoginRequest, opts ...grpc.CallOption) (*PatchUsersLoginReply, error) {
	out := new(PatchUsersLoginReply)
	err := c.cc.Invoke(ctx, Auth_PatchUsersLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginReply, error) {
	out := new(AuthLoginReply)
	err := c.cc.Invoke(ctx, Auth_AuthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	LoginUsers(context.Context, *LoginUsersRequest) (*LoginUsersReply, error)
	ExitUsersLogin(context.Context, *ExitUsersLoginRequest) (*ExitUsersLoginReply, error)
	PatchUsersLogin(context.Context, *PatchUsersLoginRequest) (*PatchUsersLoginReply, error)
	AuthLogin(context.Context, *AuthLoginRequest) (*AuthLoginReply, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) LoginUsers(context.Context, *LoginUsersRequest) (*LoginUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUsers not implemented")
}
func (UnimplementedAuthServer) ExitUsersLogin(context.Context, *ExitUsersLoginRequest) (*ExitUsersLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitUsersLogin not implemented")
}
func (UnimplementedAuthServer) PatchUsersLogin(context.Context, *PatchUsersLoginRequest) (*PatchUsersLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchUsersLogin not implemented")
}
func (UnimplementedAuthServer) AuthLogin(context.Context, *AuthLoginRequest) (*AuthLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_LoginUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_LoginUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginUsers(ctx, req.(*LoginUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ExitUsersLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitUsersLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ExitUsersLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ExitUsersLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ExitUsersLogin(ctx, req.(*ExitUsersLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_PatchUsersLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUsersLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).PatchUsersLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_PatchUsersLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).PatchUsersLogin(ctx, req.(*PatchUsersLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_AuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthLogin(ctx, req.(*AuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.auth.v1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginUsers",
			Handler:    _Auth_LoginUsers_Handler,
		},
		{
			MethodName: "ExitUsersLogin",
			Handler:    _Auth_ExitUsersLogin_Handler,
		},
		{
			MethodName: "PatchUsersLogin",
			Handler:    _Auth_PatchUsersLogin_Handler,
		},
		{
			MethodName: "AuthLogin",
			Handler:    _Auth_AuthLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/auth/v1/auth.proto",
}
